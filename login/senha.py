import hashlib
import json
import os
import time
import base64
from datetime import datetime
from cryptography.fernet import Fernet
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from typing import Dict, Optional
from estoque import SistemaEstoque
from vendas import SistemaVendas
from financeiro import SistemaFinanceiro

class SistemaLogin:
    def __init__(self, arquivo_usuarios: str = "usuarios.json"):
        """
        Inicializa o sistema de login
        
        Args:
            arquivo_usuarios: Nome do arquivo para armazenar os usu√°rios
        """
        self.arquivo_usuarios = arquivo_usuarios
        self.usuario_atual = None
        self.usuarios = self.carregar_usuarios()
        self.chave_mestre = self.obter_chave_mestre()
        self.estoque = SistemaEstoque()
        self.vendas = SistemaVendas()
        self.financeiro = SistemaFinanceiro()
    
    def obter_chave_mestre(self) -> bytes:
        """
        Obt√©m ou cria a chave mestra para criptografia
        
        Returns:
            Chave mestra em bytes
        """
        arquivo_chave = "chave_mestra.key"
        
        if os.path.exists(arquivo_chave):
            # Carrega chave existente
            with open(arquivo_chave, "rb") as f:
                return f.read()
        else:
            # Cria nova chave mestra
            chave = Fernet.generate_key()
            with open(arquivo_chave, "wb") as f:
                f.write(chave)
            return chave
    
    def gerar_salt(self) -> bytes:
        """
        Gera um salt √∫nico para cada senha
        
        Returns:
            Salt em bytes
        """
        return os.urandom(16)
    
    def derivar_chave(self, senha: str, salt: bytes) -> bytes:
        """
        Deriva uma chave da senha usando PBKDF2
        
        Args:
            senha: Senha em texto plano
            salt: Salt √∫nico
            
        Returns:
            Chave derivada em bytes
        """
        kdf = PBKDF2HMAC(
            algorithm=hashes.SHA256(),
            length=32,
            salt=salt,
            iterations=100000,
        )
        return base64.urlsafe_b64encode(kdf.derive(senha.encode()))
    
    def criptografar_senha(self, senha: str) -> str:
        """
        Criptografa uma senha usando salt √∫nico e PBKDF2
        
        Args:
            senha: Senha em texto plano
            
        Returns:
            String criptografada (salt + hash)
        """
        salt = self.gerar_salt()
        chave_derivada = self.derivar_chave(senha, salt)
        
        # Combina salt + hash para armazenamento
        return base64.urlsafe_b64encode(salt + chave_derivada).decode()
    
    def verificar_senha(self, senha: str, senha_criptografada: str) -> bool:
        """
        Verifica se uma senha corresponde √† vers√£o criptografada
        
        Args:
            senha: Senha em texto plano
            senha_criptografada: Senha criptografada
            
        Returns:
            True se a senha est√° correta
        """
        try:
            # Decodifica a string criptografada
            dados = base64.urlsafe_b64decode(senha_criptografada.encode())
            
            # Extrai salt e hash
            salt = dados[:16]
            hash_armazenado = dados[16:]
            
            # Deriva chave da senha fornecida
            chave_derivada = self.derivar_chave(senha, salt)
            
            # Compara os hashes
            return hash_armazenado == chave_derivada
        except:
            return False
    
    def hash_senha(self, senha: str) -> str:
        """
        Criptografa uma senha usando PBKDF2 com salt √∫nico
        
        Args:
            senha: Senha em texto plano
            
        Returns:
            Senha criptografada
        """
        return self.criptografar_senha(senha)
    
    def carregar_usuarios(self) -> Dict:
        """
        Carrega os usu√°rios do arquivo JSON
        
        Returns:
            Dicion√°rio com os usu√°rios
        """
        if os.path.exists(self.arquivo_usuarios):
            try:
                with open(self.arquivo_usuarios, 'r', encoding='utf-8') as arquivo:
                    return json.load(arquivo)
            except (json.JSONDecodeError, FileNotFoundError):
                return {}
        return {}
    
    def salvar_usuarios(self):
        """Salva os usu√°rios no arquivo JSON"""
        with open(self.arquivo_usuarios, 'w', encoding='utf-8') as arquivo:
            json.dump(self.usuarios, arquivo, indent=4, ensure_ascii=False)
    
    def cadastrar_usuario(self, usuario: str, senha: str, email: str = "", tipo_usuario: str = "cliente") -> bool:
        """
        Cadastra um novo usu√°rio
        
        Args:
            usuario: Nome do usu√°rio
            senha: Senha do usu√°rio
            email: Email do usu√°rio (opcional)
            tipo_usuario: Tipo do usu√°rio (cliente, funcionario, admin)
            
        Returns:
            True se o cadastro foi bem-sucedido, False caso contr√°rio
        """
        if usuario in self.usuarios:
            print("‚ùå Erro: Usu√°rio j√° existe!")
            return False
        
        if len(senha) < 6:
            print("‚ùå Erro: A senha deve ter pelo menos 6 caracteres!")
            return False
        
        # Valida o tipo de usu√°rio
        tipos_validos = ["cliente", "funcionario", "admin"]
        if tipo_usuario not in tipos_validos:
            print("‚ùå Erro: Tipo de usu√°rio inv√°lido! Use: cliente, funcionario ou admin")
            return False
        
        # Cria o hash da senha
        senha_hash = self.hash_senha(senha)
        
        # Adiciona o usu√°rio
        self.usuarios[usuario] = {
            "senha": senha_hash,
            "email": email,
            "tipo": tipo_usuario,
            "data_cadastro": time.strftime("%Y-%m-%d %H:%M:%S"),
            "ultimo_login": None,
            "ativo": True
        }
        
        # Salva no arquivo
        self.salvar_usuarios()
        print(f"‚úÖ Usu√°rio {tipo_usuario} cadastrado com sucesso!")
        return True
    
    def fazer_login(self, usuario: str, senha: str) -> bool:
        """
        Realiza o login do usu√°rio
        
        Args:
            usuario: Nome do usu√°rio
            senha: Senha do usu√°rio
            
        Returns:
            True se o login foi bem-sucedido, False caso contr√°rio
        """
        if usuario not in self.usuarios:
            print("‚ùå Erro: Usu√°rio n√£o encontrado!")
            return False
        
        if self.verificar_senha(senha, self.usuarios[usuario]["senha"]):
            # Verifica se o usu√°rio est√° ativo
            if not self.usuarios[usuario].get("ativo", True):
                print("‚ùå Erro: Usu√°rio desativado! Entre em contato com o administrador.")
                return False
            
            self.usuario_atual = usuario
            self.usuarios[usuario]["ultimo_login"] = time.strftime("%Y-%m-%d %H:%M:%S")
            self.salvar_usuarios()
            
            tipo_usuario = self.usuarios[usuario].get("tipo", "cliente")
            print(f"‚úÖ Login realizado com sucesso! Bem-vindo, {usuario} ({tipo_usuario})!")
            return True
        else:
            print("‚ùå Erro: Senha incorreta!")
            return False
    
    def fazer_logout(self):
        """Realiza o logout do usu√°rio atual"""
        if self.usuario_atual:
            print(f"üëã Logout realizado. At√© logo, {self.usuario_atual}!")
            self.usuario_atual = None
        else:
            print("‚ùå Nenhum usu√°rio logado!")
    
    def alterar_senha(self, senha_atual: str, nova_senha: str) -> bool:
        """
        Altera a senha do usu√°rio logado
        
        Args:
            senha_atual: Senha atual
            nova_senha: Nova senha
            
        Returns:
            True se a altera√ß√£o foi bem-sucedida, False caso contr√°rio
        """
        if not self.usuario_atual:
            print("‚ùå Erro: Nenhum usu√°rio logado!")
            return False
        
        if len(nova_senha) < 6:
            print("‚ùå Erro: A nova senha deve ter pelo menos 6 caracteres!")
            return False
        
        if not self.verificar_senha(senha_atual, self.usuarios[self.usuario_atual]["senha"]):
            print("‚ùå Erro: Senha atual incorreta!")
            return False
        
        self.usuarios[self.usuario_atual]["senha"] = self.hash_senha(nova_senha)
        self.salvar_usuarios()
        print("‚úÖ Senha alterada com sucesso!")
        return True
    
    def obter_info_usuario(self) -> Optional[Dict]:
        """
        Obt√©m informa√ß√µes do usu√°rio logado
        
        Returns:
            Dicion√°rio com informa√ß√µes do usu√°rio ou None se n√£o estiver logado
        """
        if not self.usuario_atual:
            print("‚ùå Erro: Nenhum usu√°rio logado!")
            return None
        
        return self.usuarios[self.usuario_atual]
    
    def listar_usuarios(self) -> list:
        """
        Lista todos os usu√°rios cadastrados (apenas nomes)
        
        Returns:
            Lista com os nomes dos usu√°rios
        """
        return list(self.usuarios.keys())
    
    def esta_logado(self) -> bool:
        """
        Verifica se h√° um usu√°rio logado
        
        Returns:
            True se h√° um usu√°rio logado, False caso contr√°rio
        """
        return self.usuario_atual is not None
    
    def obter_tipo_usuario(self) -> str:
        """
        Obt√©m o tipo do usu√°rio logado
        
        Returns:
            Tipo do usu√°rio ou "desconhecido" se n√£o estiver logado
        """
        if not self.usuario_atual:
            return "desconhecido"
        return self.usuarios[self.usuario_atual].get("tipo", "cliente")
    
    def tem_permissao(self, tipo_necessario: str) -> bool:
        """
        Verifica se o usu√°rio logado tem permiss√£o para acessar funcionalidades do tipo especificado
        
        Args:
            tipo_necessario: Tipo m√≠nimo necess√°rio (cliente, funcionario, admin)
            
        Returns:
            True se tem permiss√£o, False caso contr√°rio
        """
        if not self.usuario_atual:
            return False
        
        hierarquia = {"cliente": 1, "funcionario": 2, "admin": 3}
        tipo_atual = self.obter_tipo_usuario()
        
        return hierarquia.get(tipo_atual, 0) >= hierarquia.get(tipo_necessario, 0)
    
    def listar_usuarios_por_tipo(self, tipo: str = None) -> list:
        """
        Lista usu√°rios por tipo
        
        Args:
            tipo: Tipo espec√≠fico para filtrar (opcional)
            
        Returns:
            Lista de usu√°rios do tipo especificado
        """
        if tipo:
            return [usuario for usuario, dados in self.usuarios.items() 
                   if dados.get("tipo") == tipo]
        return list(self.usuarios.keys())
    
    def desativar_usuario(self, usuario: str) -> bool:
        """
        Desativa um usu√°rio (apenas admin pode fazer isso)
        
        Args:
            usuario: Nome do usu√°rio a ser desativado
            
        Returns:
            True se foi desativado com sucesso
        """
        if not self.tem_permissao("admin"):
            print("‚ùå Erro: Apenas administradores podem desativar usu√°rios!")
            return False
        
        if usuario not in self.usuarios:
            print("‚ùå Erro: Usu√°rio n√£o encontrado!")
            return False
        
        self.usuarios[usuario]["ativo"] = False
        self.salvar_usuarios()
        print(f"‚úÖ Usu√°rio {usuario} desativado com sucesso!")
        return True
    
    def ativar_usuario(self, usuario: str) -> bool:
        """
        Ativa um usu√°rio (apenas admin pode fazer isso)
        
        Args:
            usuario: Nome do usu√°rio a ser ativado
            
        Returns:
            True se foi ativado com sucesso
        """
        if not self.tem_permissao("admin"):
            print("‚ùå Erro: Apenas administradores podem ativar usu√°rios!")
            return False
        
        if usuario not in self.usuarios:
            print("‚ùå Erro: Usu√°rio n√£o encontrado!")
            return False
        
        self.usuarios[usuario]["ativo"] = True
        self.salvar_usuarios()
        print(f"‚úÖ Usu√°rio {usuario} ativado com sucesso!")
        return True

def exibir_menu_principal():
    """Exibe o menu principal do sistema"""
    print("\n" + "="*50)
    print("üîê SISTEMA DE LOGIN E SENHA")
    print("="*50)
    print("1. Cadastrar novo usu√°rio")
    print("2. Fazer login")
    print("3. Sair")
    print("="*50)

def exibir_menu_usuario(sistema):
    """Exibe o menu do usu√°rio logado baseado no tipo"""
    tipo_usuario = sistema.obter_tipo_usuario()
    
    print("\n" + "="*50)
    print(f"üë§ MENU DO {tipo_usuario.upper()}")
    print("="*50)
    print("1. Ver informa√ß√µes da conta")
    print("2. Alterar senha")
    
    opcao_atual = 3
    
    # Menu de estoque para funcion√°rios e administradores
    if sistema.tem_permissao("funcionario"):
        print(f"{opcao_atual}. üì¶ Gerenciar Estoque")
        opcao_atual += 1
        print(f"   ‚îî‚îÄ Cadastrar produtos, entradas e sa√≠das")
        print(f"{opcao_atual}. üìä Relat√≥rios de Estoque")
        opcao_atual += 1
        print(f"   ‚îî‚îÄ Consultar estoque e movimenta√ß√µes")
    
    # Menu de vendas para funcion√°rios e administradores
    if sistema.tem_permissao("funcionario"):
        print(f"{opcao_atual}. üõí Gerenciar Vendas")
        opcao_atual += 1
        print(f"   ‚îî‚îÄ Criar pedidos e gerenciar clientes")
        print(f"{opcao_atual}. üìã Relat√≥rios de Vendas")
        opcao_atual += 1
        print(f"   ‚îî‚îÄ Consultar vendas e gerar recibos")
    
    # Menu espec√≠fico para funcion√°rios (usu√°rios)
    if sistema.tem_permissao("funcionario"):
        print(f"{opcao_atual}. Gerenciar clientes")
        opcao_atual += 1
        print(f"{opcao_atual}. Relat√≥rios b√°sicos")
        opcao_atual += 1
    
    # Menu espec√≠fico para administradores
    if sistema.tem_permissao("admin"):
        print(f"{opcao_atual}. Gerenciar usu√°rios")
        opcao_atual += 1
        print(f"{opcao_atual}. Relat√≥rios avan√ßados")
        opcao_atual += 1
        print(f"{opcao_atual}. Configura√ß√µes do sistema")
        opcao_atual += 1
    
    # Menu financeiro para funcion√°rios e administradores
    if sistema.tem_permissao("funcionario"):
        print(f"{opcao_atual}. üí∞ Gerenciar Financeiro")
        opcao_atual += 1
        print(f"   ‚îî‚îÄ Contas a pagar e receber")
        print(f"{opcao_atual}. üìä Relat√≥rios Financeiros")
        opcao_atual += 1
        print(f"   ‚îî‚îÄ An√°lise financeira completa")
    
    print(f"{opcao_atual}. Fazer logout")
    opcao_atual += 1
    print(f"{opcao_atual}. Voltar ao menu principal")
    print("="*50)

def main():
    """Fun√ß√£o principal do programa"""
    sistema = SistemaLogin()
    
    while True:
        if not sistema.esta_logado():
            exibir_menu_principal()
            opcao = input("Escolha uma op√ß√£o: ").strip()
            
            if opcao == "1":
                print("\nüìù CADASTRO DE USU√ÅRIO")
                print("-" * 30)
                usuario = input("Digite o nome de usu√°rio: ").strip()
                senha = input("Digite a senha: ").strip()
                email = input("Digite o email (opcional): ").strip()
                
                print("\nüë• TIPOS DE USU√ÅRIO:")
                print("1. Cliente")
                print("2. Funcion√°rio")
                print("3. Administrador")
                tipo_opcao = input("Escolha o tipo de usu√°rio (1-3): ").strip()
                
                # Mapeia a op√ß√£o para o tipo
                tipos = {"1": "cliente", "2": "funcionario", "3": "admin"}
                tipo_usuario = tipos.get(tipo_opcao, "cliente")
                
                if usuario and senha:
                    sistema.cadastrar_usuario(usuario, senha, email, tipo_usuario)
                else:
                    print("‚ùå Erro: Usu√°rio e senha s√£o obrigat√≥rios!")
            
            elif opcao == "2":
                print("\nüîë LOGIN")
                print("-" * 30)
                usuario = input("Digite o nome de usu√°rio: ").strip()
                senha = input("Digite a senha: ").strip()
                
                if usuario and senha:
                    sistema.fazer_login(usuario, senha)
                else:
                    print("‚ùå Erro: Usu√°rio e senha s√£o obrigat√≥rios!")
            
            elif opcao == "3":
                print("üëã Obrigado por usar o sistema!")
                break
            
            else:
                print("‚ùå Op√ß√£o inv√°lida!")
        
        else:
            exibir_menu_usuario(sistema)
            opcao = input("Escolha uma op√ß√£o: ").strip()
            
            if opcao == "1":
                print("\nüìã INFORMA√á√ïES DA CONTA")
                print("=" * 40)
                info = sistema.obter_info_usuario()
                if info:
                    print(f"üë§ Nome de usu√°rio: {sistema.usuario_atual}")
                    print(f"üë• Tipo: {info.get('tipo', 'cliente').upper()}")
                    print(f"üìß Email: {info.get('email', 'N√£o informado')}")
                    print(f"üìÖ Data de cadastro: {info.get('data_cadastro', 'N√£o informado')}")
                    print(f"üïí √öltimo login: {info.get('ultimo_login', 'Primeiro login')}")
                    print(f"üü¢ Status: {'Ativo' if info.get('ativo', True) else 'Inativo'}")
                    
                    # Calcular tempo desde o cadastro
                    if info.get('data_cadastro'):
                        try:
                            from datetime import datetime
                            data_cadastro = datetime.strptime(info['data_cadastro'], "%Y-%m-%d %H:%M:%S")
                            data_atual = datetime.now()
                            dias_cadastro = (data_atual - data_cadastro).days
                            print(f"‚è±Ô∏è  Conta criada h√°: {dias_cadastro} dias")
                        except:
                            pass
                    
                    # Mostrar se √© o primeiro login
                    if info.get('ultimo_login') is None:
                        print("üéâ Esta √© sua primeira vez no sistema!")
                    else:
                        print("‚úÖ Conta ativa e funcionando")
                    
                    print("=" * 40)
            
            elif opcao == "2":
                print("\nüîí ALTERAR SENHA")
                print("-" * 30)
                senha_atual = input("Digite a senha atual: ").strip()
                nova_senha = input("Digite a nova senha: ").strip()
                confirmar_senha = input("Confirme a nova senha: ").strip()
                
                if nova_senha == confirmar_senha:
                    sistema.alterar_senha(senha_atual, nova_senha)
                else:
                    print("‚ùå Erro: As senhas n√£o coincidem!")
            
            # Funcionalidades de estoque (op√ß√£o 3) - Gerenciar Estoque
            elif opcao == "3" and sistema.tem_permissao("funcionario"):
                menu_gerenciar_estoque(sistema)
            
            # Funcionalidades de estoque (op√ß√£o 4) - Relat√≥rios de Estoque  
            elif opcao == "4" and sistema.tem_permissao("funcionario"):
                menu_relatorios_estoque(sistema)
            
            # Funcionalidades de vendas (op√ß√£o 5) - Gerenciar Vendas
            elif opcao == "5" and sistema.tem_permissao("funcionario"):
                menu_gerenciar_vendas(sistema)
            
            # Funcionalidades de vendas (op√ß√£o 6) - Relat√≥rios de Vendas
            elif opcao == "6" and sistema.tem_permissao("funcionario"):
                menu_relatorios_vendas(sistema)
            
            # Funcionalidades para funcion√°rios (op√ß√£o 7) - Gerenciar Clientes
            elif opcao == "7" and sistema.tem_permissao("funcionario"):
                print("\nüë• GERENCIAR CLIENTES")
                print("-" * 30)
                clientes = sistema.listar_usuarios_por_tipo("cliente")
                if clientes:
                    print("üìã Lista de clientes:")
                    for i, cliente in enumerate(clientes, 1):
                        print(f"  {i}. {cliente}")
                else:
                    print("‚ùå Nenhum cliente cadastrado!")
            
            # Funcionalidades para funcion√°rios (op√ß√£o 8) - Relat√≥rios B√°sicos
            elif opcao == "8" and sistema.tem_permissao("funcionario"):
                print("\nüìä RELAT√ìRIOS B√ÅSICOS")
                print("-" * 30)
                total_clientes = len(sistema.listar_usuarios_por_tipo("cliente"))
                total_funcionarios = len(sistema.listar_usuarios_por_tipo("funcionario"))
                print(f"üë• Total de clientes: {total_clientes}")
                print(f"üë®‚Äçüíº Total de funcion√°rios: {total_funcionarios}")
            
            # Funcionalidades para administradores (op√ß√£o 9) - Gerenciar Usu√°rios
            elif opcao == "9" and sistema.tem_permissao("admin"):
                print("\n‚öôÔ∏è GERENCIAR USU√ÅRIOS")
                print("-" * 30)
                print("1. Listar todos os usu√°rios")
                print("2. Desativar usu√°rio")
                print("3. Ativar usu√°rio")
                sub_opcao = input("Escolha uma op√ß√£o: ").strip()
                
                if sub_opcao == "1":
                    print("\nüìã TODOS OS USU√ÅRIOS:")
                    for usuario, dados in sistema.usuarios.items():
                        status = "üü¢ Ativo" if dados.get("ativo", True) else "üî¥ Inativo"
                        print(f"  üë§ {usuario} ({dados.get('tipo', 'cliente')}) - {status}")
                
                elif sub_opcao == "2":
                    usuario = input("Digite o nome do usu√°rio a desativar: ").strip()
                    sistema.desativar_usuario(usuario)
                
                elif sub_opcao == "3":
                    usuario = input("Digite o nome do usu√°rio a ativar: ").strip()
                    sistema.ativar_usuario(usuario)
            
            # Funcionalidades para administradores (op√ß√£o 10) - Relat√≥rios Avan√ßados
            elif opcao == "10" and sistema.tem_permissao("admin"):
                print("\nüìà RELAT√ìRIOS AVAN√áADOS")
                print("-" * 30)
                total_usuarios = len(sistema.usuarios)
                total_admins = len(sistema.listar_usuarios_por_tipo("admin"))
                usuarios_ativos = sum(1 for dados in sistema.usuarios.values() if dados.get("ativo", True))
                
                print(f"üìä Total de usu√°rios: {total_usuarios}")
                print(f"üëë Administradores: {total_admins}")
                print(f"üü¢ Usu√°rios ativos: {usuarios_ativos}")
                print(f"üî¥ Usu√°rios inativos: {total_usuarios - usuarios_ativos}")
            
            # Funcionalidades para administradores (op√ß√£o 11) - Configura√ß√µes
            elif opcao == "11" and sistema.tem_permissao("admin"):
                print("\n‚öôÔ∏è CONFIGURA√á√ïES DO SISTEMA")
                print("-" * 30)
                print("üîê Sistema de criptografia: PBKDF2")
                print("üõ°Ô∏è N√≠veis de seguran√ßa: Ativo")
                print("üìÅ Arquivo de usu√°rios: usuarios.json")
                print("üîë Chave mestra: chave_mestra.key")
                print("üì¶ Arquivo de produtos: produtos.json")
                print("üìù Arquivo de movimentos: movimentos.json")
                print("üí∞ Arquivo de contas a pagar: contas_pagar.json")
                print("üí∞ Arquivo de contas a receber: contas_receber.json")
            
            # Funcionalidades financeiras (op√ß√£o 12) - Gerenciar Financeiro
            elif opcao == "12" and sistema.tem_permissao("funcionario"):
                menu_gerenciar_financeiro(sistema)
            
            # Funcionalidades financeiras (op√ß√£o 13) - Relat√≥rios Financeiros
            elif opcao == "13" and sistema.tem_permissao("funcionario"):
                menu_relatorios_financeiros(sistema)
            
            # Logout (op√ß√£o din√¢mica)
            elif opcao in ["3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15"]:
                # Verifica se √© logout baseado no tipo de usu√°rio
                tipo_usuario = sistema.obter_tipo_usuario()
                
                if tipo_usuario == "cliente":
                    # Cliente: op√ß√£o 3 = logout
                    if opcao == "3":
                        sistema.fazer_logout()
                    else:
                        print("‚ùå Op√ß√£o inv√°lida!")
                
                elif tipo_usuario == "funcionario":
                    # Funcion√°rio: op√ß√£o 11 = logout
                    if opcao == "11":
                        sistema.fazer_logout()
                    else:
                        print("‚ùå Op√ß√£o inv√°lida!")
                
                elif tipo_usuario == "admin":
                    # Admin: op√ß√£o 14 = logout
                    if opcao == "14":
                        sistema.fazer_logout()
                    else:
                        print("‚ùå Op√ß√£o inv√°lida!")
            
            else:
                print("‚ùå Op√ß√£o inv√°lida!")

def menu_gerenciar_estoque(sistema):
    """Menu para gerenciar estoque"""
    while True:
        print("\nüì¶ GERENCIAR ESTOQUE")
        print("=" * 40)
        print("1. Cadastrar produto")
        print("2. Listar produtos")
        print("3. Buscar produto")
        print("4. Entrada de estoque")
        print("5. Sa√≠da de estoque")
        print("6. Excluir produto")
        print("7. Voltar ao menu anterior")
        print("=" * 40)
        
        opcao = input("Escolha uma op√ß√£o: ").strip()
        
        if opcao == "1":
            print("\nüìù CADASTRAR PRODUTO")
            print("-" * 30)
            nome = input("Nome do produto: ").strip()
            categoria = input("Categoria: ").strip()
            try:
                preco = float(input("Pre√ßo unit√°rio: R$ ").strip())
                estoque_minimo = int(input("Estoque m√≠nimo (padr√£o 5): ").strip() or "5")
                
                sistema.estoque.cadastrar_produto(nome, categoria, preco, estoque_minimo, sistema.usuario_atual)
            except ValueError:
                print("‚ùå Erro: Valores num√©ricos inv√°lidos!")
        
        elif opcao == "2":
            print("\nüìã LISTA DE PRODUTOS")
            print("-" * 30)
            produtos = sistema.estoque.listar_produtos()
            if produtos:
                print(f"{'C√≥digo':<8} {'Nome':<20} {'Categoria':<15} {'Pre√ßo':<10} {'Estoque':<8} {'M√≠n.':<5}")
                print("-" * 70)
                for produto in produtos:
                    alerta = "‚ö†Ô∏è" if produto["quantidade"] <= produto["estoque_minimo"] else "  "
                    print(f"{produto['codigo']:<8} {produto['nome'][:19]:<20} {produto['categoria'][:14]:<15} R${produto['preco']:<9.2f} {produto['quantidade']:<8} {produto['estoque_minimo']:<5} {alerta}")
            else:
                print("‚ùå Nenhum produto cadastrado!")
        
        elif opcao == "3":
            print("\nüîç BUSCAR PRODUTO")
            print("-" * 30)
            termo = input("Digite c√≥digo, nome ou categoria: ").strip()
            if termo:
                produtos = sistema.estoque.buscar_produto(termo)
                if produtos:
                    print(f"{'C√≥digo':<8} {'Nome':<20} {'Categoria':<15} {'Pre√ßo':<10} {'Estoque':<8}")
                    print("-" * 65)
                    for produto in produtos:
                        print(f"{produto['codigo']:<8} {produto['nome'][:19]:<20} {produto['categoria'][:14]:<15} R${produto['preco']:<9.2f} {produto['quantidade']:<8}")
                else:
                    print("‚ùå Nenhum produto encontrado!")
        
        elif opcao == "4":
            print("\nüì¶ ENTRADA DE ESTOQUE")
            print("-" * 30)
            codigo = input("C√≥digo do produto: ").strip().upper()
            try:
                quantidade = int(input("Quantidade: ").strip())
                observacao = input("Observa√ß√£o (opcional): ").strip()
                
                sistema.estoque.registrar_movimento(codigo, "entrada", quantidade, observacao, sistema.usuario_atual)
            except ValueError:
                print("‚ùå Erro: Quantidade deve ser um n√∫mero!")
        
        elif opcao == "5":
            print("\nüì§ SA√çDA DE ESTOQUE")
            print("-" * 30)
            codigo = input("C√≥digo do produto: ").strip().upper()
            try:
                quantidade = int(input("Quantidade: ").strip())
                observacao = input("Observa√ß√£o (opcional): ").strip()
                
                sistema.estoque.registrar_movimento(codigo, "saida", quantidade, observacao, sistema.usuario_atual)
            except ValueError:
                print("‚ùå Erro: Quantidade deve ser um n√∫mero!")
        
        elif opcao == "6" and sistema.tem_permissao("admin"):
            print("\nüóëÔ∏è EXCLUIR PRODUTO")
            print("-" * 30)
            codigo = input("C√≥digo do produto: ").strip().upper()
            confirmacao = input("Tem certeza? (s/N): ").strip().lower()
            if confirmacao == 's':
                sistema.estoque.excluir_produto(codigo, sistema.usuario_atual)
        
        elif opcao == "7":
            break
        
        else:
            print("‚ùå Op√ß√£o inv√°lida!")

def menu_relatorios_estoque(sistema):
    """Menu para relat√≥rios de estoque"""
    while True:
        print("\nüìä RELAT√ìRIOS DE ESTOQUE")
        print("=" * 40)
        print("1. Relat√≥rio geral do estoque")
        print("2. Produtos com estoque baixo")
        print("3. √öltimas movimenta√ß√µes")
        print("4. Buscar movimenta√ß√µes por produto")
        print("5. Voltar ao menu anterior")
        print("=" * 40)
        
        opcao = input("Escolha uma op√ß√£o: ").strip()
        
        if opcao == "1":
            print("\nüìà RELAT√ìRIO GERAL DO ESTOQUE")
            print("=" * 50)
            relatorio = sistema.estoque.relatorio_estoque()
            
            print(f"üì¶ Total de produtos: {relatorio['total_produtos']}")
            print(f"üìä Total de itens: {relatorio['total_itens']}")
            print(f"üí∞ Valor total: R$ {relatorio['valor_total']:.2f}")
            print(f"‚ö™ Produtos zerados: {relatorio['produtos_zerados']}")
            print(f"‚ö†Ô∏è Produtos com estoque baixo: {relatorio['produtos_estoque_baixo']}")
            
            if relatorio['categorias']:
                print("\nüìã Por categoria:")
                for cat, dados in relatorio['categorias'].items():
                    print(f"  {cat}: {dados['produtos']} produtos, {dados['itens']} itens, R$ {dados['valor']:.2f}")
            
            print(f"\nüìÖ Relat√≥rio gerado em: {relatorio['data_relatorio']}")
        
        elif opcao == "2":
            print("\n‚ö†Ô∏è PRODUTOS COM ESTOQUE BAIXO")
            print("-" * 40)
            produtos = sistema.estoque.obter_produtos_estoque_baixo()
            if produtos:
                print(f"{'C√≥digo':<8} {'Nome':<20} {'Atual':<6} {'M√≠n.':<5} {'Status'}")
                print("-" * 50)
                for produto in produtos:
                    status = "ZERADO" if produto["quantidade"] == 0 else "BAIXO"
                    print(f"{produto['codigo']:<8} {produto['nome'][:19]:<20} {produto['quantidade']:<6} {produto['estoque_minimo']:<5} {status}")
            else:
                print("‚úÖ Nenhum produto com estoque baixo!")
        
        elif opcao == "3":
            print("\nüìù √öLTIMAS MOVIMENTA√á√ïES")
            print("-" * 40)
            movimentos = sistema.estoque.relatorio_movimentos(20)
            if movimentos:
                print(f"{'Data/Hora':<17} {'Tipo':<8} {'Produto':<15} {'Qtd':<5} {'Usu√°rio':<10}")
                print("-" * 60)
                for mov in movimentos:
                    emoji = "üì¶" if mov["tipo"] == "entrada" else "üì§"
                    print(f"{mov['data_hora']:<17} {emoji} {mov['tipo'][:7]:<8} {mov['nome_produto'][:14]:<15} {mov['quantidade']:<5} {mov['usuario'][:9]:<10}")
            else:
                print("‚ùå Nenhuma movimenta√ß√£o registrada!")
        
        elif opcao == "4":
            print("\nüîç MOVIMENTA√á√ïES POR PRODUTO")
            print("-" * 40)
            termo = input("Digite c√≥digo ou nome do produto: ").strip()
            if termo:
                produtos = sistema.estoque.buscar_produto(termo)
                if produtos:
                    codigo = produtos[0]["codigo"]
                    movimentos = [m for m in sistema.estoque.movimentos if m["codigo_produto"] == codigo]
                    
                    if movimentos:
                        print(f"\nMovimenta√ß√µes de {produtos[0]['nome']}:")
                        print(f"{'Data/Hora':<17} {'Tipo':<8} {'Qtd':<5} {'Ant.':<5} {'Atual':<5} {'Usu√°rio'}")
                        print("-" * 55)
                        for mov in movimentos[-10:]:  # √öltimas 10
                            emoji = "üì¶" if mov["tipo"] == "entrada" else "üì§"
                            print(f"{mov['data_hora']:<17} {emoji} {mov['tipo'][:7]:<8} {mov['quantidade']:<5} {mov['estoque_anterior']:<5} {mov['estoque_atual']:<5} {mov['usuario']}")
                    else:
                        print("‚ùå Nenhuma movimenta√ß√£o encontrada!")
                else:
                    print("‚ùå Produto n√£o encontrado!")
        
        elif opcao == "5":
            break
        
        else:
            print("‚ùå Op√ß√£o inv√°lida!")

def menu_gerenciar_vendas(sistema):
    """Menu para gerenciar vendas"""
    while True:
        print("\nüõí GERENCIAR VENDAS")
        print("=" * 40)
        print("1. Cadastrar cliente")
        print("2. Listar clientes")
        print("3. Buscar cliente")
        print("4. Criar pedido")
        print("5. Listar pedidos")
        print("6. Buscar pedido")
        print("7. Atualizar status do pedido")
        print("8. Gerar recibo PDF")
        print("9. Voltar ao menu anterior")
        print("=" * 40)
        
        opcao = input("Escolha uma op√ß√£o: ").strip()
        
        if opcao == "1":
            print("\nüë§ CADASTRAR CLIENTE")
            print("-" * 30)
            nome = input("Nome do cliente: ").strip()
            email = input("Email: ").strip()
            telefone = input("Telefone: ").strip()
            endereco = input("Endere√ßo (opcional): ").strip()
            
            sistema.vendas.cadastrar_cliente(nome, email, telefone, endereco, sistema.usuario_atual)
        
        elif opcao == "2":
            print("\nüìã LISTA DE CLIENTES")
            print("-" * 30)
            clientes = sistema.vendas.listar_clientes()
            if clientes:
                print(f"{'ID':<4} {'Nome':<20} {'Email':<25} {'Telefone':<15}")
                print("-" * 70)
                for cliente in clientes:
                    print(f"{cliente['id']:<4} {cliente['nome'][:19]:<20} {cliente['email'][:24]:<25} {cliente['telefone'][:14]:<15}")
            else:
                print("‚ùå Nenhum cliente cadastrado!")
        
        elif opcao == "3":
            print("\nüîç BUSCAR CLIENTE")
            print("-" * 30)
            termo = input("Digite ID, nome ou email: ").strip()
            if termo:
                clientes = sistema.vendas.buscar_cliente(termo)
                if clientes:
                    print(f"{'ID':<4} {'Nome':<20} {'Email':<25} {'Telefone':<15}")
                    print("-" * 70)
                    for cliente in clientes:
                        print(f"{cliente['id']:<4} {cliente['nome'][:19]:<20} {cliente['email'][:24]:<25} {cliente['telefone'][:14]:<15}")
                else:
                    print("‚ùå Nenhum cliente encontrado!")
        
        elif opcao == "4":
            print("\nüìù CRIAR PEDIDO")
            print("-" * 30)
            
            # Seleciona cliente
            cliente_id = input("ID do cliente: ").strip()
            if cliente_id not in sistema.vendas.clientes:
                print("‚ùå Cliente n√£o encontrado!")
                continue
            
            # Lista produtos dispon√≠veis
            produtos_estoque = sistema.estoque.listar_produtos()
            if not produtos_estoque:
                print("‚ùå Nenhum produto dispon√≠vel no estoque!")
                continue
            
            print("\nüì¶ PRODUTOS DISPON√çVEIS:")
            print(f"{'C√≥digo':<8} {'Nome':<20} {'Pre√ßo':<10} {'Estoque':<8}")
            print("-" * 50)
            for produto in produtos_estoque:
                print(f"{produto['codigo']:<8} {produto['nome'][:19]:<20} R${produto['preco']:<9.2f} {produto['quantidade']:<8}")
            
            # Adiciona produtos ao pedido
            produtos_pedido = []
            while True:
                print("\nAdicionar produto ao pedido:")
                codigo_produto = input("C√≥digo do produto (ou 'fim' para finalizar): ").strip().upper()
                
                if codigo_produto.lower() == 'fim':
                    break
                
                # Encontra o produto
                produto_encontrado = None
                for produto in produtos_estoque:
                    if produto['codigo'] == codigo_produto:
                        produto_encontrado = produto
                        break
                
                if not produto_encontrado:
                    print("‚ùå Produto n√£o encontrado!")
                    continue
                
                try:
                    quantidade = int(input(f"Quantidade de {produto_encontrado['nome']}: ").strip())
                    if quantidade <= 0:
                        print("‚ùå Quantidade deve ser maior que zero!")
                        continue
                    
                    if quantidade > produto_encontrado['quantidade']:
                        print(f"‚ùå Estoque insuficiente! Dispon√≠vel: {produto_encontrado['quantidade']}")
                        continue
                    
                    produtos_pedido.append({
                        "codigo": produto_encontrado['codigo'],
                        "nome": produto_encontrado['nome'],
                        "quantidade": quantidade,
                        "preco_unitario": produto_encontrado['preco']
                    })
                    
                    print(f"‚úÖ {quantidade}x {produto_encontrado['nome']} adicionado!")
                    
                except ValueError:
                    print("‚ùå Quantidade inv√°lida!")
            
            if produtos_pedido:
                observacoes = input("Observa√ß√µes do pedido (opcional): ").strip()
                
                # Cria o pedido
                codigo_pedido = sistema.vendas.criar_pedido(cliente_id, produtos_pedido, observacoes, sistema.usuario_atual)
                
                if codigo_pedido:
                    # Atualiza estoque (sa√≠da autom√°tica)
                    for item in produtos_pedido:
                        sistema.estoque.registrar_movimento(
                            item['codigo'], 
                            "saida", 
                            item['quantidade'], 
                            f"Venda - Pedido {codigo_pedido}", 
                            sistema.usuario_atual
                        )
            else:
                print("‚ùå Pedido deve ter pelo menos um produto!")
        
        elif opcao == "5":
            print("\nüìã LISTA DE PEDIDOS")
            print("-" * 30)
            pedidos = sistema.vendas.listar_pedidos()
            if pedidos:
                print(f"{'C√≥digo':<8} {'Cliente':<20} {'Total':<10} {'Status':<12} {'Data'}")
                print("-" * 65)
                for pedido in pedidos:
                    print(f"{pedido['codigo']:<8} {pedido['cliente_nome'][:19]:<20} R${pedido['total']:<9.2f} {pedido['status']:<12} {pedido['data_criacao'][:10]}")
            else:
                print("‚ùå Nenhum pedido encontrado!")
        
        elif opcao == "6":
            print("\nüîç BUSCAR PEDIDO")
            print("-" * 30)
            termo = input("Digite c√≥digo do pedido ou nome do cliente: ").strip()
            if termo:
                pedidos = sistema.vendas.buscar_pedido(termo)
                if pedidos:
                    print(f"{'C√≥digo':<8} {'Cliente':<20} {'Total':<10} {'Status':<12} {'Data'}")
                    print("-" * 65)
                    for pedido in pedidos:
                        print(f"{pedido['codigo']:<8} {pedido['cliente_nome'][:19]:<20} R${pedido['total']:<9.2f} {pedido['status']:<12} {pedido['data_criacao'][:10]}")
                else:
                    print("‚ùå Nenhum pedido encontrado!")
        
        elif opcao == "7":
            print("\nüìù ATUALIZAR STATUS DO PEDIDO")
            print("-" * 30)
            codigo_pedido = input("C√≥digo do pedido: ").strip().upper()
            print("Status dispon√≠veis: pendente, aprovado, cancelado, finalizado")
            novo_status = input("Novo status: ").strip().lower()
            
            if novo_status in ["pendente", "aprovado", "cancelado", "finalizado"]:
                sistema.vendas.atualizar_status_pedido(codigo_pedido, novo_status, sistema.usuario_atual)
            else:
                print("‚ùå Status inv√°lido!")
        
        elif opcao == "8":
            print("\nüìÑ GERAR RECIBO PDF")
            print("-" * 30)
            codigo_pedido = input("C√≥digo do pedido: ").strip().upper()
            
            caminho_pdf = sistema.vendas.gerar_recibo_pdf(codigo_pedido)
            if caminho_pdf:
                print(f"üìÑ PDF salvo em: {caminho_pdf}")
        
        elif opcao == "9":
            break
        
        else:
            print("‚ùå Op√ß√£o inv√°lida!")

def menu_relatorios_vendas(sistema):
    """Menu para relat√≥rios de vendas"""
    while True:
        print("\nüìã RELAT√ìRIOS DE VENDAS")
        print("=" * 40)
        print("1. Relat√≥rio geral de vendas")
        print("2. Relat√≥rio por per√≠odo")
        print("3. Top produtos vendidos")
        print("4. Pedidos por status")
        print("5. Voltar ao menu anterior")
        print("=" * 40)
        
        opcao = input("Escolha uma op√ß√£o: ").strip()
        
        if opcao == "1":
            print("\nüìà RELAT√ìRIO GERAL DE VENDAS")
            print("=" * 50)
            relatorio = sistema.vendas.relatorio_vendas()
            
            print(f"üìä Total de pedidos: {relatorio['total_pedidos']}")
            print(f"üí∞ Total de vendas: R$ {relatorio['total_vendas']:.2f}")
            print(f"‚úÖ Pedidos finalizados: {relatorio['pedidos_finalizados']}")
            print(f"‚è≥ Pedidos pendentes: {relatorio['pedidos_pendentes']}")
            
            if relatorio['top_produtos']:
                print("\nüèÜ TOP 5 PRODUTOS MAIS VENDIDOS:")
                for i, (produto, dados) in enumerate(relatorio['top_produtos'], 1):
                    print(f"  {i}. {produto}: {dados['quantidade']} unidades - R$ {dados['valor']:.2f}")
            
            print(f"\nüìÖ Relat√≥rio gerado em: {relatorio['data_relatorio']}")
        
        elif opcao == "2":
            print("\nüìÖ RELAT√ìRIO POR PER√çODO")
            print("-" * 30)
            data_inicio = input("Data de in√≠cio (YYYY-MM-DD): ").strip()
            data_fim = input("Data de fim (YYYY-MM-DD): ").strip()
            
            if data_inicio and data_fim:
                relatorio = sistema.vendas.relatorio_vendas(data_inicio, data_fim)
                
                print(f"\nüìä Relat√≥rio de {data_inicio} a {data_fim}")
                print(f"üìä Total de pedidos: {relatorio['total_pedidos']}")
                print(f"üí∞ Total de vendas: R$ {relatorio['total_vendas']:.2f}")
                print(f"‚úÖ Pedidos finalizados: {relatorio['pedidos_finalizados']}")
                print(f"‚è≥ Pedidos pendentes: {relatorio['pedidos_pendentes']}")
            else:
                print("‚ùå Datas inv√°lidas!")
        
        elif opcao == "3":
            print("\nüèÜ TOP PRODUTOS VENDIDOS")
            print("-" * 30)
            relatorio = sistema.vendas.relatorio_vendas()
            
            if relatorio['produtos_vendidos']:
                print(f"{'Produto':<25} {'Quantidade':<12} {'Valor Total':<12}")
                print("-" * 50)
                for produto, dados in sorted(relatorio['produtos_vendidos'].items(), 
                                           key=lambda x: x[1]['quantidade'], reverse=True):
                    print(f"{produto[:24]:<25} {dados['quantidade']:<12} R$ {dados['valor']:<11.2f}")
            else:
                print("‚ùå Nenhuma venda registrada!")
        
        elif opcao == "4":
            print("\nüìä PEDIDOS POR STATUS")
            print("-" * 30)
            pedidos = sistema.vendas.listar_pedidos()
            
            if pedidos:
                status_count = {}
                for pedido in pedidos:
                    status = pedido['status']
                    status_count[status] = status_count.get(status, 0) + 1
                
                for status, count in status_count.items():
                    print(f"  {status.upper()}: {count} pedidos")
            else:
                print("‚ùå Nenhum pedido encontrado!")
        
        elif opcao == "5":
            break
        
        else:
            print("‚ùå Op√ß√£o inv√°lida!")

def menu_gerenciar_financeiro(sistema):
    """Menu para gerenciar financeiro"""
    while True:
        print("\nüí∞ GERENCIAR FINANCEIRO")
        print("=" * 50)
        print("1. Cadastrar conta a pagar")
        print("2. Cadastrar conta a receber")
        print("3. Listar contas a pagar")
        print("4. Listar contas a receber")
        print("5. Buscar conta a pagar")
        print("6. Buscar conta a receber")
        print("7. Registrar pagamento")
        print("8. Registrar recebimento")
        print("9. Excluir conta a pagar")
        print("10. Excluir conta a receber")
        print("11. Alertas de vencimento")
        print("12. Voltar ao menu anterior")
        print("=" * 50)
        
        opcao = input("Escolha uma op√ß√£o: ").strip()
        
        if opcao == "1":
            print("\nüìù CADASTRAR CONTA A PAGAR")
            print("-" * 40)
            
            # Mostrar categorias dispon√≠veis
            print("üìã CATEGORIAS DISPON√çVEIS:")
            for codigo, info in sistema.financeiro.categorias["contas_pagar"].items():
                print(f"  {codigo}: {info['nome']} ({info['tipo']}) {info['cor']}")
            
            descricao = input("Descri√ß√£o da conta: ").strip()
            categoria = input("Categoria: ").strip().lower()
            try:
                valor = float(input("Valor: R$ ").strip())
                data_vencimento = input("Data de vencimento (YYYY-MM-DD): ").strip()
                fornecedor = input("Fornecedor (opcional): ").strip()
                observacoes = input("Observa√ß√µes (opcional): ").strip()
                
                sistema.financeiro.cadastrar_conta_pagar(
                    descricao, categoria, valor, data_vencimento, 
                    fornecedor, observacoes, sistema.usuario_atual
                )
            except ValueError:
                print("‚ùå Erro: Valor inv√°lido!")
        
        elif opcao == "2":
            print("\nüìù CADASTRAR CONTA A RECEBER")
            print("-" * 40)
            
            # Mostrar categorias dispon√≠veis
            print("üìã CATEGORIAS DISPON√çVEIS:")
            for codigo, info in sistema.financeiro.categorias["contas_receber"].items():
                print(f"  {codigo}: {info['nome']} ({info['tipo']}) {info['cor']}")
            
            cliente = input("Nome do cliente: ").strip()
            descricao = input("Descri√ß√£o da conta: ").strip()
            categoria = input("Categoria: ").strip().lower()
            try:
                valor = float(input("Valor: R$ ").strip())
                data_vencimento = input("Data de vencimento (YYYY-MM-DD): ").strip()
                observacoes = input("Observa√ß√µes (opcional): ").strip()
                
                sistema.financeiro.cadastrar_conta_receber(
                    cliente, descricao, categoria, valor, data_vencimento, 
                    observacoes, sistema.usuario_atual
                )
            except ValueError:
                print("‚ùå Erro: Valor inv√°lido!")
        
        elif opcao == "3":
            print("\nüìã LISTA DE CONTAS A PAGAR")
            print("-" * 40)
            print("Filtros:")
            print("1. Todas")
            print("2. Pendentes")
            print("3. Pagas")
            print("4. Atrasadas")
            filtro = input("Escolha o filtro (1-4): ").strip()
            
            status_map = {"1": None, "2": "pendente", "3": "pago", "4": "atrasado"}
            status = status_map.get(filtro)
            
            contas = sistema.financeiro.listar_contas_pagar(status)
            if contas:
                print(f"{'ID':<8} {'Descri√ß√£o':<25} {'Categoria':<15} {'Valor':<12} {'Vencimento':<12} {'Status'}")
                print("-" * 85)
                for conta in contas:
                    status_emoji = "‚úÖ" if conta["status"] == "pago" else "‚è≥" if conta["status"] == "pendente" else "üî¥"
                    print(f"{conta['id']:<8} {conta['descricao'][:24]:<25} {conta['categoria'][:14]:<15} {sistema.financeiro.formatar_valor(conta['valor']):<12} {conta['data_vencimento']:<12} {status_emoji}")
            else:
                print("‚ùå Nenhuma conta encontrada!")
        
        elif opcao == "4":
            print("\nüìã LISTA DE CONTAS A RECEBER")
            print("-" * 40)
            print("Filtros:")
            print("1. Todas")
            print("2. Pendentes")
            print("3. Recebidas")
            print("4. Atrasadas")
            filtro = input("Escolha o filtro (1-4): ").strip()
            
            status_map = {"1": None, "2": "pendente", "3": "recebido", "4": "atrasado"}
            status = status_map.get(filtro)
            
            contas = sistema.financeiro.listar_contas_receber(status)
            if contas:
                print(f"{'ID':<8} {'Cliente':<20} {'Descri√ß√£o':<20} {'Valor':<12} {'Vencimento':<12} {'Status'}")
                print("-" * 85)
                for conta in contas:
                    status_emoji = "‚úÖ" if conta["status"] == "recebido" else "‚è≥" if conta["status"] == "pendente" else "üî¥"
                    print(f"{conta['id']:<8} {conta['cliente'][:19]:<20} {conta['descricao'][:19]:<20} {sistema.financeiro.formatar_valor(conta['valor']):<12} {conta['data_vencimento']:<12} {status_emoji}")
            else:
                print("‚ùå Nenhuma conta encontrada!")
        
        elif opcao == "5":
            print("\nüîç BUSCAR CONTA A PAGAR")
            print("-" * 40)
            termo = input("Digite ID, descri√ß√£o ou fornecedor: ").strip()
            if termo:
                contas = sistema.financeiro.buscar_conta_pagar(termo)
                if contas:
                    print(f"{'ID':<8} {'Descri√ß√£o':<25} {'Fornecedor':<15} {'Valor':<12} {'Vencimento':<12} {'Status'}")
                    print("-" * 85)
                    for conta in contas:
                        status_emoji = "‚úÖ" if conta["status"] == "pago" else "‚è≥" if conta["status"] == "pendente" else "üî¥"
                        print(f"{conta['id']:<8} {conta['descricao'][:24]:<25} {conta['fornecedor'][:14]:<15} {sistema.financeiro.formatar_valor(conta['valor']):<12} {conta['data_vencimento']:<12} {status_emoji}")
                else:
                    print("‚ùå Nenhuma conta encontrada!")
        
        elif opcao == "6":
            print("\nüîç BUSCAR CONTA A RECEBER")
            print("-" * 40)
            termo = input("Digite ID, cliente ou descri√ß√£o: ").strip()
            if termo:
                contas = sistema.financeiro.buscar_conta_receber(termo)
                if contas:
                    print(f"{'ID':<8} {'Cliente':<20} {'Descri√ß√£o':<20} {'Valor':<12} {'Vencimento':<12} {'Status'}")
                    print("-" * 85)
                    for conta in contas:
                        status_emoji = "‚úÖ" if conta["status"] == "recebido" else "‚è≥" if conta["status"] == "pendente" else "üî¥"
                        print(f"{conta['id']:<8} {conta['cliente'][:19]:<20} {conta['descricao'][:19]:<20} {sistema.financeiro.formatar_valor(conta['valor']):<12} {conta['data_vencimento']:<12} {status_emoji}")
                else:
                    print("‚ùå Nenhuma conta encontrada!")
        
        elif opcao == "7":
            print("\nüí∞ REGISTRAR PAGAMENTO")
            print("-" * 40)
            conta_id = input("ID da conta: ").strip().upper()
            data_pagamento = input("Data do pagamento (YYYY-MM-DD, Enter para hoje): ").strip()
            if not data_pagamento:
                data_pagamento = None
            
            sistema.financeiro.registrar_pagamento(conta_id, data_pagamento, sistema.usuario_atual)
        
        elif opcao == "8":
            print("\nüí∞ REGISTRAR RECEBIMENTO")
            print("-" * 40)
            conta_id = input("ID da conta: ").strip().upper()
            data_recebimento = input("Data do recebimento (YYYY-MM-DD, Enter para hoje): ").strip()
            if not data_recebimento:
                data_recebimento = None
            
            sistema.financeiro.registrar_recebimento(conta_id, data_recebimento, sistema.usuario_atual)
        
        elif opcao == "9" and sistema.tem_permissao("admin"):
            print("\nüóëÔ∏è EXCLUIR CONTA A PAGAR")
            print("-" * 40)
            conta_id = input("ID da conta: ").strip().upper()
            confirmacao = input("Tem certeza? (s/N): ").strip().lower()
            if confirmacao == 's':
                sistema.financeiro.excluir_conta_pagar(conta_id, sistema.usuario_atual)
        
        elif opcao == "10" and sistema.tem_permissao("admin"):
            print("\nüóëÔ∏è EXCLUIR CONTA A RECEBER")
            print("-" * 40)
            conta_id = input("ID da conta: ").strip().upper()
            confirmacao = input("Tem certeza? (s/N): ").strip().lower()
            if confirmacao == 's':
                sistema.financeiro.excluir_conta_receber(conta_id, sistema.usuario_atual)
        
        elif opcao == "11":
            print("\n‚ö†Ô∏è ALERTAS DE VENCIMENTO")
            print("-" * 40)
            alertas = sistema.financeiro.obter_alertas_vencimento()
            
            if alertas["vencendo_hoje"]:
                print("üî¥ VENCENDO HOJE:")
                for item in alertas["vencendo_hoje"]:
                    conta = item["conta"]
                    tipo = "PAGAR" if item["tipo"] == "pagar" else "RECEBER"
                    print(f"  {tipo}: {conta['id']} - {conta.get('descricao', conta.get('cliente', ''))} - {sistema.financeiro.formatar_valor(conta['valor'])}")
            
            if alertas["vencendo_em_7_dias"]:
                print("\nüü° VENCENDO EM 7 DIAS:")
                for item in alertas["vencendo_em_7_dias"]:
                    conta = item["conta"]
                    tipo = "PAGAR" if item["tipo"] == "pagar" else "RECEBER"
                    print(f"  {tipo}: {conta['id']} - {conta.get('descricao', conta.get('cliente', ''))} - {sistema.financeiro.formatar_valor(conta['valor'])}")
            
            if alertas["atrasadas"]:
                print("\nüî¥ ATRASADAS:")
                for item in alertas["atrasadas"]:
                    conta = item["conta"]
                    tipo = "PAGAR" if item["tipo"] == "pagar" else "RECEBER"
                    print(f"  {tipo}: {conta['id']} - {conta.get('descricao', conta.get('cliente', ''))} - {sistema.financeiro.formatar_valor(conta['valor'])}")
            
            if not any(alertas.values()):
                print("‚úÖ Nenhum alerta de vencimento!")
        
        elif opcao == "12":
            break
        
        else:
            print("‚ùå Op√ß√£o inv√°lida!")

def menu_relatorios_financeiros(sistema):
    """Menu para relat√≥rios financeiros"""
    while True:
        print("\nüìä RELAT√ìRIOS FINANCEIROS")
        print("=" * 50)
        print("1. Relat√≥rio financeiro geral")
        print("2. Relat√≥rio por per√≠odo")
        print("3. An√°lise por categoria")
        print("4. Contas atrasadas")
        print("5. Fluxo de caixa b√°sico")
        print("6. Fluxo de caixa di√°rio")
        print("7. Fluxo de caixa mensal")
        print("8. Fluxo de caixa por per√≠odo")
        print("9. Voltar ao menu anterior")
        print("=" * 50)
        
        opcao = input("Escolha uma op√ß√£o: ").strip()
        
        if opcao == "1":
            print("\nüìà RELAT√ìRIO FINANCEIRO GERAL")
            print("=" * 60)
            relatorio = sistema.financeiro.relatorio_financeiro()
            
            resumo = relatorio["resumo"]
            print(f"üí∞ TOTAL A PAGAR: {sistema.financeiro.formatar_valor(resumo['total_pagar'])}")
            print(f"üí∞ TOTAL A RECEBER: {sistema.financeiro.formatar_valor(resumo['total_receber'])}")
            print(f"‚úÖ TOTAL PAGO: {sistema.financeiro.formatar_valor(resumo['total_pago'])}")
            print(f"‚úÖ TOTAL RECEBIDO: {sistema.financeiro.formatar_valor(resumo['total_recebido'])}")
            print(f"‚è≥ PENDENTE A PAGAR: {sistema.financeiro.formatar_valor(resumo['total_pagar_pendente'])}")
            print(f"‚è≥ PENDENTE A RECEBER: {sistema.financeiro.formatar_valor(resumo['total_receber_pendente'])}")
            print(f"üî¥ ATRASADO A PAGAR: {sistema.financeiro.formatar_valor(resumo['total_pagar_atrasado'])}")
            print(f"üî¥ ATRASADO A RECEBER: {sistema.financeiro.formatar_valor(resumo['total_receber_atrasado'])}")
            print(f"üíµ SALDO ATUAL: {sistema.financeiro.formatar_valor(resumo['saldo'])}")
            print(f"üîÆ SALDO FUTURO: {sistema.financeiro.formatar_valor(resumo['saldo_futuro'])}")
            
            print(f"\nüìä RESUMO DE CONTAS:")
            print(f"  Contas a pagar: {relatorio['contas_pagar']['total']} (pendentes: {relatorio['contas_pagar']['pendentes']}, pagas: {relatorio['contas_pagar']['pagas']}, atrasadas: {relatorio['contas_pagar']['atrasadas']})")
            print(f"  Contas a receber: {relatorio['contas_receber']['total']} (pendentes: {relatorio['contas_receber']['pendentes']}, recebidas: {relatorio['contas_receber']['recebidas']}, atrasadas: {relatorio['contas_receber']['atrasadas']})")
        
        elif opcao == "2":
            print("\nüìÖ RELAT√ìRIO POR PER√çODO")
            print("-" * 40)
            data_inicio = input("Data de in√≠cio (YYYY-MM-DD): ").strip()
            data_fim = input("Data de fim (YYYY-MM-DD): ").strip()
            
            if data_inicio and data_fim:
                relatorio = sistema.financeiro.relatorio_financeiro(data_inicio, data_fim)
                resumo = relatorio["resumo"]
                
                print(f"\nüìä RELAT√ìRIO DE {data_inicio} A {data_fim}")
                print(f"üí∞ TOTAL A PAGAR: {sistema.financeiro.formatar_valor(resumo['total_pagar'])}")
                print(f"üí∞ TOTAL A RECEBER: {sistema.financeiro.formatar_valor(resumo['total_receber'])}")
                print(f"‚úÖ TOTAL PAGO: {sistema.financeiro.formatar_valor(resumo['total_pago'])}")
                print(f"‚úÖ TOTAL RECEBIDO: {sistema.financeiro.formatar_valor(resumo['total_recebido'])}")
                print(f"üíµ SALDO: {sistema.financeiro.formatar_valor(resumo['saldo'])}")
            else:
                print("‚ùå Datas inv√°lidas!")
        
        elif opcao == "3":
            print("\nüìã AN√ÅLISE POR CATEGORIA")
            print("-" * 40)
            relatorio = sistema.financeiro.relatorio_financeiro()
            
            print("üì§ CONTAS A PAGAR POR CATEGORIA:")
            for cat, dados in relatorio["categorias_pagar"].items():
                cat_info = sistema.financeiro.categorias["contas_pagar"].get(cat, {"nome": cat})
                print(f"  {cat_info['nome']}: {sistema.financeiro.formatar_valor(dados['total'])} (pago: {sistema.financeiro.formatar_valor(dados['pago'])}, pendente: {sistema.financeiro.formatar_valor(dados['pendente'])})")
            
            print("\nüì• CONTAS A RECEBER POR CATEGORIA:")
            for cat, dados in relatorio["categorias_receber"].items():
                cat_info = sistema.financeiro.categorias["contas_receber"].get(cat, {"nome": cat})
                print(f"  {cat_info['nome']}: {sistema.financeiro.formatar_valor(dados['total'])} (recebido: {sistema.financeiro.formatar_valor(dados['recebido'])}, pendente: {sistema.financeiro.formatar_valor(dados['pendente'])})")
        
        elif opcao == "4":
            print("\nüî¥ CONTAS ATRASADAS")
            print("-" * 40)
            relatorio = sistema.financeiro.relatorio_financeiro()
            
            if relatorio["contas_atrasadas"]["pagar"]:
                print("üì§ CONTAS A PAGAR ATRASADAS:")
                for conta in relatorio["contas_atrasadas"]["pagar"]:
                    print(f"  {conta['id']}: {conta['descricao']} - {sistema.financeiro.formatar_valor(conta['valor'])} (vencimento: {conta['data_vencimento']})")
            
            if relatorio["contas_atrasadas"]["receber"]:
                print("\nüì• CONTAS A RECEBER ATRASADAS:")
                for conta in relatorio["contas_atrasadas"]["receber"]:
                    print(f"  {conta['id']}: {conta['cliente']} - {conta['descricao']} - {sistema.financeiro.formatar_valor(conta['valor'])} (vencimento: {conta['data_vencimento']})")
            
            if not relatorio["contas_atrasadas"]["pagar"] and not relatorio["contas_atrasadas"]["receber"]:
                print("‚úÖ Nenhuma conta atrasada!")
        
        elif opcao == "5":
            print("\nüíµ FLUXO DE CAIXA B√ÅSICO")
            print("-" * 40)
            relatorio = sistema.financeiro.relatorio_financeiro()
            resumo = relatorio["resumo"]
            
            print(f"üí∞ ENTRADAS:")
            print(f"  Recebido: {sistema.financeiro.formatar_valor(resumo['total_recebido'])}")
            print(f"  A receber: {sistema.financeiro.formatar_valor(resumo['total_receber_pendente'])}")
            print(f"  Total entradas: {sistema.financeiro.formatar_valor(resumo['total_recebido'] + resumo['total_receber_pendente'])}")
            
            print(f"\nüí∏ SA√çDAS:")
            print(f"  Pago: {sistema.financeiro.formatar_valor(resumo['total_pago'])}")
            print(f"  A pagar: {sistema.financeiro.formatar_valor(resumo['total_pagar_pendente'])}")
            print(f"  Total sa√≠das: {sistema.financeiro.formatar_valor(resumo['total_pago'] + resumo['total_pagar_pendente'])}")
            
            print(f"\nüíµ SALDO:")
            print(f"  Atual: {sistema.financeiro.formatar_valor(resumo['saldo'])}")
            print(f"  Projetado: {sistema.financeiro.formatar_valor(resumo['saldo_futuro'])}")
        
        elif opcao == "6":
            print("\nüìä FLUXO DE CAIXA DI√ÅRIO")
            print("-" * 40)
            data = input("Data (YYYY-MM-DD) ou Enter para hoje: ").strip()
            if not data:
                data = None
            
            relatorio = sistema.financeiro.relatorio_fluxo_caixa_completo("dia", data=data)
            print(relatorio)
        
        elif opcao == "7":
            print("\nüìä FLUXO DE CAIXA MENSAL")
            print("-" * 40)
            try:
                ano = int(input("Ano (Enter para atual): ").strip() or datetime.now().year)
                mes = int(input("M√™s (1-12, Enter para atual): ").strip() or datetime.now().month)
                
                if 1 <= mes <= 12:
                    relatorio = sistema.financeiro.relatorio_fluxo_caixa_completo("mes", ano=ano, mes=mes)
                    print(relatorio)
                else:
                    print("‚ùå M√™s inv√°lido! Use valores de 1 a 12.")
            except ValueError:
                print("‚ùå Valores inv√°lidos! Use n√∫meros.")
        
        elif opcao == "8":
            print("\nüìä FLUXO DE CAIXA POR PER√çODO")
            print("-" * 40)
            data_inicio = input("Data inicial (YYYY-MM-DD): ").strip()
            data_fim = input("Data final (YYYY-MM-DD): ").strip()
            
            if data_inicio and data_fim:
                relatorio = sistema.financeiro.relatorio_fluxo_caixa_completo("periodo", data_inicio=data_inicio, data_fim=data_fim)
                print(relatorio)
            else:
                print("‚ùå Datas inv√°lidas!")
        
        elif opcao == "9":
            break
        
        else:
            print("‚ùå Op√ß√£o inv√°lida!")

if __name__ == "__main__":
    main()
